public class PointSET 
{
    private SET<Point2D> set; 
    
    // construct an empty set of points 
    public PointSET()         
    {
        set = new SET<Point2D>();
    }
    
    // is the set empty?
    public boolean isEmpty()  
    {
        return set.isEmpty();
    }
    
    // number of points in the set
    public int size()     
    {
        return set.size(); 
    }
    
    // add the point to the set (if it is not already in the set)
    public void insert(Point2D p)    
    {
        if (p == null) throw new NullPointerException();
        set.add(p);
    }
    
    // does the set contain point p?
    public boolean contains(Point2D p)  
    {
        if (p == null) throw new NullPointerException();
        return set.contains(p);
    }
    
    // draw all points to standard draw
    public void draw()      
    {
        for (Point2D point2D : set)
            point2D.draw();
    }
    
    // all points that are inside the rectangle 
    public Iterable<Point2D> range(RectHV rect) 
    {
        if (rect == null) throw new NullPointerException();
        Queue<Point2D> q = new Queue<Point2D>();
        for (Point2D point2D : set)
            if (rect.contains(point2D))
                q.enqueue(point2D);
        return q;
    }
    
    // a nearest neighbor in the set to point p; null if the set is empty
    public Point2D nearest(Point2D p)   
    {
        if (p == null) throw new NullPointerException();
        if (set.isEmpty()) return null;
        Point2D thePoint = set.min();
        for (Point2D point2D : set)
            if (p.distanceSquaredTo(point2D) < p.distanceSquaredTo(thePoint))
                thePoint = point2D; 
        return thePoint;
    }

    // unit testing of the methods (optional)
    public static void main(String[] args)   
    {
        String filename = args[0];
        In in = new In(filename);

        StdDraw.show(0);

        // initialize the two data structures with point from standard input
        PointSET brute = new PointSET();
        //KdTree kdtree = new KdTree();
        while (!in.isEmpty()) {
            double x = in.readDouble();
            double y = in.readDouble();
            Point2D p = new Point2D(x, y);
            //kdtree.insert(p);
            brute.insert(p);
        }

        while (true) {

            // the location (x, y) of the mouse
            double x = StdDraw.mouseX();
            double y = StdDraw.mouseY();
            Point2D query = new Point2D(x, y);

            // draw all of the points
            StdDraw.clear();
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(.01);
            brute.draw();

            // draw in red the nearest neighbor (using brute-force algorithm)
            StdDraw.setPenRadius(.03);
            StdDraw.setPenColor(StdDraw.RED);
            brute.nearest(query).draw();
            StdDraw.setPenRadius(.02);

            // draw in blue the nearest neighbor (using kd-tree algorithm)
            //StdDraw.setPenColor(StdDraw.BLUE);
            //kdtree.nearest(query).draw();
            StdDraw.show(0);
            StdDraw.show(40);
        }
        
    }
}